// Code generated by aliensbot. DO NOT EDIT.
// source: module scene
package service

import (
	"github.com/KylinHe/aliensboot-core/chanrpc"
	"github.com/KylinHe/aliensboot-core/cluster/center"
	"github.com/KylinHe/aliensboot-core/cluster/center/service"
	"github.com/KylinHe/aliensboot-core/exception"
	"github.com/KylinHe/aliensboot-core/protocol/base"
	"github.com/KylinHe/aliensboot-server/module/scene/conf"
	"github.com/KylinHe/aliensboot-server/protocol"
	"github.com/gogo/protobuf/proto"
)

var instance service.IService = nil

func Init(chanRpc *chanrpc.Server) {
	instance = center.PublicService(conf.Config.Service, service.NewRpcHandler(chanRpc, handle))
}

func Close() {
	center.ReleaseService(instance)
}

func handle(request *base.Any) (response *base.Any) {
	requestProxy := &protocol.Request{}
	responseProxy := &protocol.Response{}
	response = &base.Any{}
	isResponse := false
	defer func() {
		//处理消息异常
		if err := recover(); err != nil {
			switch err.(type) {
			case protocol.Code:
				responseProxy.Code = err.(protocol.Code)
				break
			default:
				exception.PrintStackDetail(err)
				responseProxy.Code = protocol.Code_ServerException
			}
		}
		if !isResponse {
			return
		}
		data, _ := proto.Marshal(responseProxy)
		responseProxy.Session = requestProxy.GetSession()
		response.Value = data
	}()
	error := proto.Unmarshal(request.Value, requestProxy)
	if error != nil {
		exception.GameException(protocol.Code_InvalidRequest)
	}
	isResponse = handleRequest(request.GetAuthId(), request.GetGateId(), requestProxy, responseProxy)
	return
}

func handleRequest(authID int64, gateID string, request *protocol.Request, response *protocol.Response) bool {

	if request.GetEntityCall() != nil {
		handleEntityCall(authID, gateID, request.GetEntityCall())
		return false
	}

	if request.GetLoginScene() != nil {
		handleLoginScene(authID, gateID, request.GetLoginScene())
		return false
	}

	if request.GetMoveScene() != nil {
		handleMoveScene(authID, gateID, request.GetMoveScene())
		return false
	}

	if request.GetMigrateIn() != nil {
		handleMigrateIn(authID, gateID, request.GetMigrateIn())
		return false
	}

	if request.GetMigrateOut() != nil {
		handleMigrateOut(authID, gateID, request.GetMigrateOut())
		return false
	}

	response.Code = protocol.Code_InvalidRequest
	return true
}
